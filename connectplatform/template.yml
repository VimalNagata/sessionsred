AWSTemplateFormatVersion: '2010-09-09'
Description: 'Sessions Red API - Connecting students with teachers'

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment environment (dev, test, prod)
    AllowedValues:
      - dev
      - test
      - prod

Globals:
  Function:
    Timeout: 30  # 30 seconds timeout
    MemorySize: 256  # 256MB of memory

Resources:
  # Lambda function for handling API requests
  SessionsRedFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      Code: 
        S3Bucket: sessions-red-lambda-deployments
        S3Key: lambda-deployment.zip
      Environment:
        Variables:
          STAGE: !Ref Stage
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
  
  # API Gateway for the Lambda function
  SessionsRedApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "sessions-red-api-${Stage}"
      Description: API for Sessions Red platform
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource: '*'
  
  # API Gateway deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiRootMethod
    Properties:
      RestApiId: !Ref SessionsRedApi
      StageName: !Ref Stage
  
  # API Gateway root resource
  ApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SessionsRedApi
      ResourceId: !GetAtt SessionsRedApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionsRedFunction.Arn}/invocations"
  
  # API Gateway proxy resource
  ApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SessionsRedApi
      ParentId: !GetAtt SessionsRedApi.RootResourceId
      PathPart: '{proxy+}'
  
  # API Gateway proxy method
  ApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SessionsRedApi
      ResourceId: !Ref ApiProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionsRedFunction.Arn}/invocations"
  
  # Lambda permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SessionsRedFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SessionsRedApi}/*/*/*"

  # DynamoDB Tables
  UserProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserProfiles
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  TeacherAvailabilityTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TeacherAvailability
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: availability_id
          AttributeType: S
      KeySchema:
        - AttributeName: availability_id
          KeyType: HASH

  BookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Bookings
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: booking_id
          AttributeType: S
      KeySchema:
        - AttributeName: booking_id
          KeyType: HASH

  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Sessions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH

  ServiceCatalogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ServiceCatalog
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: service_id
          AttributeType: S
      KeySchema:
        - AttributeName: service_id
          KeyType: HASH

Outputs:
  SessionsRedApi:
    Description: "API Gateway endpoint URL for Sessions Red API"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  SessionsRedFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt SessionsRedFunction.Arn